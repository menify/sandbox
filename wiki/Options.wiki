
The most useful feature of the options is that values are kept together with conditions.
I.e. value is valid only if its condition is true, otherwise default (or other) value is used.

For example:
    {{{
    options.If().cc_name['gcc'].target_os['windows'].user_interface['console'].linkflags += '-Wl,--subsystem,console'
    }}}
    
This is eqaul to:
    {{{
    if (options.cc_name == 'gcc') and (options.target_os == 'windows') and (options.user_interface == 'console'):
        options.linkflags += '-Wl,--subsystem,console'
    }}}


`options` is container object of options.
Method `If()` creates an conditional object to create a condition to set a value of an option.
The conditional object is saved together with value. Conditions are checked upon access to the option.

In our example value `-Wl,--subsystem,console` will be added to `linkflags` only if the condition is true.

For example:
    {{{
1    options.linkflags = '-Wl,--strip-all'
2    
3    options.cc_name = ''
4    options.target_os = ''
5    options.user_interface = ''
6    
7    options.If().cc_name['gcc'].target_os['windows'].user_interface['console'].linkflags += '-Wl,--subsystem,console'
8    
9    print "options.linkflags:", str( options.linkflags )
10   
11   options.cc_name = 'gcc'
12   options.target_os = 'windows'
13   options.user_interface = 'console'
14   
15   print "options.linkflags:", str( options.linkflags )
16   
17   options.target_os = 'linux'
18   print "options.linkflags:", str( options.linkflags )
    }}}

Will print:
    {{{
    options.linkflags: -Wl,--strip-all
    options.linkflags: -Wl,--strip-all -Wl,--subsystem,console
    options.linkflags: -Wl,--strip-all
    }}}

At line 1, we simply set option `linkflags` to `-Wl,--strip-all`. This value doesn't depend from any option.

At lines 3-5, we reset options `cc_name`, `target_os` and `user_interface` to an empty string.

At line 7, we create a conditional object via method `If()`, and set up a condition equal to:
    `cc_name == 'gcc' and target_os == 'windows' and user_interface == 'console'`

Operator [] is interpreted as `==`, e.g. `cc_name['gcc']` is similar to `cc_name == 'gcc'`.

Then a value `-Wl,--subsystem,console`, operation `+=` and the conditional object is added to the option `linkflags`.
The condition is not evaluated at this line.
This condition will evaluated later upon an access to the option `linkflags`

In our case the value `-Wl,--subsystem,console` will be added to the value of the option `linkflags`
only if `cc_name == 'gcc'`, `target_os == 'windows'` and `user_interface == 'console'`.

At line 9, `cc_name == ''`, `target_os == ''` and `user_interface == ''`, i.e the condition is false
and the value `-Wl,--subsystem,console` is not added to the result value.
Result will be `-Wl,--strip-all`

At lines 11-13, we change options `cc_name`, `target_os` and `user_interface` to values `gcc`, `windows` and `console` respectively.

At line 15, the condition is true and value `-Wl,--subsystem,console` will be added to the result.
Result value will be `-Wl,--strip-all -Wl,--subsystem,console`

At line 17, we set `target_os` to `linux` and our condition became false again.
The result value of option `linkflags` at line 18 will be `-Wl,--strip-all`.

Conditional values make options are very flexible and powerful.
We can easily set up any number _live_ dependencies between options and any number of _live_ combinations of values.

