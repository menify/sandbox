=== Issues ===

[http://scons.org SCons] is good software construction tool written on [http://python.org Python].
For more information about [http://scons.org SCons] go to the [http://scons.org SCons's] site.

This extension implements some useful features for the [http://scons.org SCons]:

=== Features ===
 * Build variants: debug, release, final, as well as user's build variants
 * Cross-compilation, support of the host and the target platforms (OS, CPU and etc.)
 * Abstract settings for common compilers settings, like: optimization, warning level, debug information, RTTI and etc.
 * Provide information about the current compilers and their versions
 * Easy customizable compilation flags for certain targets
 * Dynamic configuration of tools
 * Very flexible options
 * Any option can be changed via a configuration file or/and a command line
 * and more

=== Aqualid ===
All features of this extension are based on its [Options options].
These options keep almost all information about the build process.

The main feature of the options is conditional values.

Usually, variable has only one unconditional value.
They may be set inside conditions, but their values are unconditional.

Opposite to this, the options may have many conditional values (as well as unconditional values).
This means that the options remember values with conditions.

The current value is only one, but it depends from conditions.
Conditions are tested during accessing to an [Options option].

For example:
    Usual value:
        {{{
        if build_variant == 'release':
            optimization = 'speed'
            debug_symbols = 'off'
            runtime_debugging = 'off'
        
        elif build_variant == 'debug':
            optimization = 'off'
            debug_symbols = 'on'
            runtime_debugging = 'on'
        }}}
    
    Conditional values:
        {{{
        release = options.If().build_variant['release']  # generate a release condition
        release.optimization        = 'speed'
        release.debug_symbols       = 'off'
        release.runtime_debugging   = 'off'
        
        debug = options.If().build_variant['debug']     # generate a debug condition
        debug.optimization        = 'off'
        debug.debug_symbols       = 'on'
        debug.runtime_debugging   = 'on'
        }}}

The conditional values remember conditions. This means that a value is valid only if its condition is true.

For example:
    {{{
    options.build_variant = 'release'
    print "optimization:", options.optimization
    print "debug_symbols:", options.debug_symbols
    
    options.build_variant = 'debug'
    print "optimization:", options.optimization
    print "debug_symbols:", options.debug_symbols
    }}}
    
Result will be:
    {{{
    optimization: speed
    debug_symbols: off
    
    optimization: off
    debug_symbols: on
    }}}

The values of `optimization` and `debug_symbols` depends from `build_variant`.

Conditional values make the options very flexible.
They help to easily setup different and complex build variants.

In [http://www.lib.ru/RUFANT/SHEFNER/girl.txt SciFi reality] (great thanks to [http://en.wikipedia.org/wiki/Vadim_Shefner Vadim Shefner]),
*[http://www.lib.ru/RUFANT/SHEFNER/girl.txt Aqualid]* is the universal building material.

The options are building material of this extension.
