import os

SetBuildDir('output')

cpp = Tool('c++', tools_path = '../tools')

cpp_options = cpp.options

Config( 'make.cfg', cpp_options )

is_windows_build = bool( cpp_options.target_os == 'windows')
is_unix_build = not is_windows_build

scintilla_dir = cpp_options.root_src_dir.get() +'/scintilla'

src_dir     = scintilla_dir + '/src'
lexers_dir  = scintilla_dir + '/lexers'
lexlib_dir  = scintilla_dir + '/lexlib'
include_dir = scintilla_dir + '/include'
win32_dir   = scintilla_dir + '/win32'
gtk_dir     = scintilla_dir + '/gtk'

#//-------------------------------------------------------//

if is_windows_build:
  use_direct2d = cpp.CheckHeaders( "d2d1.h", "dwrite.h" )
else:
  use_direct2d = False

#//-------------------------------------------------------//

include_dirs = [ src_dir, include_dir, lexlib_dir ]

if is_windows_build:
  include_dirs  += [win32_dir]
elif is_unix_build:
  include_dirs += [gtk_dir]

cpp_options.cpppath += include_dirs

#//-------------------------------------------------------//
#// Compile common base sources

base_sources = FindFiles( src_dir, '*.cxx',
                          exclude_mask = ["Catalogue.cxx", "ExternalLexer.cxx", "ScintillaBase.cxx"] )

base_objs = [ cpp.Compile( base_sources ) ]

if is_windows_build:
  base_objs += [
    cpp.Compile( win32_dir + "/PlatWin.cxx", use_direct2d = use_direct2d ),
    cpp.CompileResource( win32_dir + "/ScintRes.rc")
  ]
  
  include_dirs = [ src_dir, include_dir, lexlib_dir ]
  
elif is_unix_build:
  base_objs += [ cpp.Compile( gtk_dir + "/PlatGtk.cxx" ) ]

#//-------------------------------------------------------//
# Create Lexers static library

lexers_sources = FindFiles( lexers_dir, '*.cxx' )

lexers_lib = cpp.LinkStaticLibrary( lexers_sources, target = 'Lexers' )

Alias( ['lexers', 'lexlib' ], lexers_lib, "Build a static library of lexers" )
Default( lexers_lib )

#//-------------------------------------------------------//
#// Create Scintilla shared library

scintilla_sources  =  [ os.path.join( lexlib_dir, src ) for src in ('CharacterCategory.cxx', 'CharacterSet.cxx', 'PropSetSimple.cxx') ]
scintilla_sources +=  [ src_dir + "/ScintillaBase.cxx" ]

scintilla_objs = [ cpp.Compile( scintilla_sources ) ]
if is_windows_build:
  scintilla_objs += [ cpp.Compile( os.path.join(win32_dir, "ScintillaWin.cxx"), use_direct2d = use_direct2d )]

def_file = FileEntity( os.path.join( win32_dir, "Scintilla.def" ) ) if is_windows_build else None

scintilla_dll = cpp.LinkSharedLibrary( scintilla_objs, base_objs, target = 'Scintilla', def_file = def_file )

Alias( ['scintilla', 'Scintilla'], scintilla_dll, "Build Scintilla shared library" )
Default( 'scintilla' )

#//-------------------------------------------------------//
#// Create SciLexer shared library

lex_dll_sources = FindFiles( lexlib_dir, '*.cxx', exclude_mask = "LexerNoExceptions.cxx" )
lex_dll_sources += ( os.path.join( src_dir, src ) for src in ["Catalogue.cxx", "ExternalLexer.cxx"] )

lex_dll_objs = [ cpp.Compile( lex_dll_sources ) ]
lex_dll_objs += [ cpp.Compile( src_dir + "/ScintillaBase.cxx",
                               cppdefines = 'SCI_LEXER',
                               suffix = "_lex" ) ]
if is_windows_build:
  lex_dll_objs += [ cpp.Compile( win32_dir + "/ScintillaWin.cxx",
                                 cppdefines = 'SCI_LEXER',
                                 suffix = "_lex",
                                 use_direct2d = use_direct2d ) ]

scilexer_dll = cpp.LinkSharedLibrary( lex_dll_objs, base_objs, lexers_lib,
                                      target = 'SciLexer',
                                      def_file = def_file )

Alias( ['scilexer', 'SciLexer', 'lexdll'], scilexer_dll, "Build a shared library of lexers" )
Default( scilexer_dll )
