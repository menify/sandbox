# Global abbreviations file for SciTE
# For Linux, place in $prefix/share/scite
# For Windows, place in same directory as SciTE.EXE (or Sc1.EXE)
# Contains a list of entries of the form abbreviation=expansion
# Type the abbreviation and press Ctrl+B to insert the expansion
# The '|' marke the position the caret will be after expansion.

main=int main(int argc, char *argv[]) {\n|\n}
i=if (|)\n{\n\n}

sf=static |(\n        \n        \n    )\n{\n    \n}\n
ef=MPL_EXTERN_C |

id=#ifdef |\n#endif
d=#ifdef MLIB_DEBUG\n|\n#endif  //  #ifdef MLIB_DEBUG  //

# module header
mh=/******************************************************************************\n\
    \n\
    Description:\
\n        |[TEXT]\n\
\n\
    -------------------------------------------------------\n\
    \n\
    Portability:\n\
        CPU         : [TYPE OF CPU, or limits]\n\
        OS          : [TYPE OF OS, or limits]\n\
        DEEP        : [deep of module ( 0 - platform depended, 1 - platform and task independed, 2 - task depended)]\n\
\n\
    -------------------------------------------------------\n\
    \n\
    Authors:\
\n        [AUTHOR] <[EMAIL]>\n\
        \n\
    \n\
    -------------------------------------------------------\n\
\n\
    History:\n\
        \
\n        [Change description text]                       [date (DD-MMM-YYYY)]    [author]\n\
        \n\
\n\
*******************************************************************************/\n

# C++ header template
hh=#ifndef |\n\
#define \n\
\n\
\n\
\n\
#endif  //  #ifndef   //\n

t=typedef 
s=struct\n{\n    \n}\n|;\n
c=class |\n\
{\n\
    public:\n\
        \n\
};\n
e=enum\n{\n    \n}\n|;\n
ts=typedef struct\n{\n    \n}\n|;\n
te=typedef enum\n{\n    \n}\n|;\n
f=for (|; ; )\n{\n    \n}\n

sw=switch( | )\n\
{\n\
    case :\n\
        {\n\
            \n\
        }\n\
        break;\n\
    \n\
    case :\n\
        {\n\
            \n\
        }\n\
        break;\n\
    \n\
    default:\n\
        \n\
}\n



li=__FILE__, __LINE__
lia=const char*  src_file, size_t  src_line
liv=src_file, src_line

sz=size_t
pd=ptrdiff_t
so=sizeof(|)

j=//===========================================================================//\n//
u=//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n
k=//-------------------------------------------------------//\n
kk=//=======================================================//\n
l=//---------------------------------------------------------------------------//\n
ll=//===========================================================================//\n

r=return |;
rt=return true;
rf=return false;
rr=return M_SIZE_MAX;
er=M_SIZE_MAX
ir=M_IGNORE_RET(|

tab=\t
b=//-------------------------------------------------------//\n\
//          LABELS:                                      //\n

exc=EXTERN_C 
ex=extern 

rc=reinterpret_cast<|>()
sc=static_cast<|>()
msc=MPL_STATIC_CAST( |, )
cc=const_cast<|>()
dc=dynamic_cast<|>()
ns=namespace
p=M_PROF();\n
a=M_ASSERT( | );
at=M_ASSERT( this->|test() );

th=MPL_THROW((|))
nth=MPL_NOTHROW()|
re=MPL_RAISE( | )
lm=log_msg("|");


# My templates
jfp=//===========================================================================//\n\
//                  F U N C T I O N S    P R O T O T Y P E S\n
jt=//===========================================================================//\n\
//                              T Y P E S\n
jm=//===========================================================================//\n\
//                              M A C R O S\n
js=//===========================================================================//\n\
//                              C L A S S E S
jc=//===========================================================================//\n\
//                              C O N S T A N T S\n
jlm=//===========================================================================//\n\
//                          L O C A L    M A C R O S\n
jlt=//===========================================================================//\n\
//                          L O C A L    T Y P E S\n
jlv=//===========================================================================//\n\
//                         L O C A L    V A R I A B L E S\n
jlc=//===========================================================================//\n\
//                          L O C A L    C O N S T A N T S\n
jlf=//===========================================================================//\n\
//                      L O C A L    F U N C T I O N S\n
jgv=//===========================================================================//\n\
//                          G L O B A L    V A R I A B L E S\n
jev=//===========================================================================//\n\
//                      E X T E R N A L    V A R I A B L E S\n
jgt=//===========================================================================//\n\
//                          G L O B A L    T Y P E S\n
jgc=//===========================================================================//\n\
//                          G L O B A L    C O N S T A N T S\n
jgf=//===========================================================================//\n\
//                          G L O B A L    F U N C T I O N S\n
jif=//===========================================================================//\n\
//                      I N L I N E    F U N C T I O N S\n

jcd=//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n\
//                  D A T A\n

jcm=//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n\
//              M E T H O D S\n

jf=//===========================================================================//\n\
//                          F U N C T I O N S\n

fh=///////////////////////////////////////////////////////////////////////////////\n\
/// <BRIEF>\n\
/// <DESCRIPTION>\n\
/// @retval VAL1 - if success\n\
/// @retval VAL2 - if fail\n\
/// @throw ERR_E - No exceptions are generated\n

h=///////////////////////////////////////////////////////////////////////////////\n\
/// <BRIEF>\n\
/// <DESCRIPTION>\n

lh=///////////////////////////////////////////////////////////\n\
/// <BRIEF>\n\
/// <DESCRIPTION>\n


# Motorola's templates
mt=//==================================================================================================\n\
//                        TYPEDEFS (STRUCTURES, UNIONS, ENUMS)\n\
//==================================================================================================\n
mm=//==================================================================================================\n\
//                                       MACROS\n\
//==================================================================================================\n

mlm=//==================================================================================================\n\
//                                       LOCAL MACROS\n\
//==================================================================================================\n
mlc=//==================================================================================================\n\
//                                      LOCAL CONSTANTS\n\
//==================================================================================================\n
mlt=//==================================================================================================\n\
//                        LOCAL TYPEDEFS (STRUCTURES, UNIONS, ENUMS)\n\
//==================================================================================================\n
mlv=//==================================================================================================\n\
//                                      LOCAL VARIABLES\n\
//==================================================================================================\n
mgv=//==================================================================================================\n\
//                                      GLOBAL VARIABLES\n\
//==================================================================================================\n
mgc=//==================================================================================================\n\
//                                      GLOBAL CONSTANTS\n\
//==================================================================================================\n
mlf=//==================================================================================================\n\
//                                      LOCAL FUNCTIONS\n\
//==================================================================================================\n
mgf=//==================================================================================================\n\
//                                      GLOBAL FUNCTIONS\n\
//==================================================================================================\n
mfp=//==================================================================================================\n\
//                                      FUNCTIONS PROTOTYPES\n\
//==================================================================================================\n


mlog=static void  log_msg( const char* format, ... )\n\
{\n\
    va_list         vars;\n\
    \n\
    static char             buf[ 512 ];\n\
    static const char       prefix[] = "LMSG(%u): ";\n\
    static unsigned int     msg_counter = 0;\n\
    \n\
    \n\
    sprintf( buf, prefix, msg_counter++ );\n\
    \n\
    va_start( vars, format );\n\
    vsprintf( buf + strlen( buf ), format, vars );\n\
    va_end( vars );\n\
    \n\
    suLogData( SU_PORT_LOG_ALWAYS, 0x11111111, 1, strlen( buf ) + sizeof(char), buf );\n\
}

mn=MMC_LOG_ENTRY( "|" );
mx=MMC_LOG_EXIT( "|", app_status );
ma=MMC_ASSERT( | );

is=if (app_status == SYN_SUCCESS)|\n{\n\n}
