
import os

SetBuildDir('output')

ReadOptions('make.cfg')
root_src_dir = options.root_src_dir.get()
scintilla_dir = os.path.join( root_src_dir, 'scintilla')

cpp = Tool('c++', tools_path = '../tools' )

gcc_options = cpp.options.If.cc_name.eq('gcc')
windows_options = cpp.options.If().target_os.eq('windows')
unix_options = cpp.options.If().target_os.ne('windows')

cpp.options.rtti = False
cpp.options.cxxstd = 'c++11'

gcc_options.linkflags = ['-static', '-Wl,--enable-runtime-pseudo-reloc-v2', '-Wl,--add-stdcall-alias']

include_dirs = ['src', 'include', 'lexlib']
src_dirs = ['src','lexlib', 'lexers']

src_dirs = [os.path.join( scintilla_dir, inc ) for inc in src_dirs ]

cpp.options.cpppath += [os.path.join( scintilla_dir, inc ) for inc in include_dirs ]

windows_options.cpppath += 'win32'
unix_options.cpppath += 'gtk'

windows_options.libs = ['kernel32', 'user32', 'imm32', 'ole32', 'uuid']

src_files = FindFiles( tests_dir, '*.cpp' )

for src in src_files:
    
    test_name = os.path.splitext( os.path.split(src)[1] )[0]
    
    test_app = cpp.LinkProgram( src, target = test_name )
    
    # Create some useful aliases
    Alias( 'build_' + test_name, test_app )     # 'build_<test case name>' - to build only certain test case
    Alias( 'build', test_app )                  # 'build' - to build all test cases
    Default( test_app )                         # mark it as default target
    
    # Execute the test case program
    test = tools.ExecuteCommand( test_app )
    
    # Mark it as 'AlwaysBuild' which is mean that we should rerun the test case even if its program was not changed after the last run.
    AlwaysBuild( test )
    
    # Create some useful aliases for test case execution
    Alias( 'run_' + test_name, test )           # 'run_<test case name>' - to run only certain test case
    Alias( ['run', 'test'], test )              # 'run' - to run all test cases

