import os

SetBuildDir('output')

cpp = Tool('c++', tools_path = '../tools' )

cpp_options = cpp.options

ReadOptions( 'make.cfg', cpp_options )


is_windows_build = bool( cpp_options.target_os == 'windows')
is_unix_build = not is_windows_build

scintilla_dir = os.path.join( cpp_options.root_src_dir.get(), 'scintilla')
src_dir = os.path.join( scintilla_dir, 'src')
lexers_dir = os.path.join( scintilla_dir, 'lexers')
lexlib_dir = os.path.join( scintilla_dir, 'lexlib')

lexlib_sources  = FindFiles( lexers_dir, '*.cxx' )
lexslib_sources = FindFiles( lexlib_dir, '*.cxx' )

base_sources  = FindFiles( src_dir, '*.cxx',
                           exclude_mask = ["Catalogue.cxx","ExternalLexer.cxx", "ScintillaBase.cxx"] )

base_sources += ( os.path.join(lexlib_dir, src ) for src in [ 'CharacterCategory.cxx', 'CharacterSet.cxx', 'PropSetSimple.cxx'] )
if is_windows_build:
  base_sources += [ os.path.join(scintilla_dir, 'win32', "PlatWin.cxx") ]
elif is_unix_build:
  base_sources += [ os.path.join(scintilla_dir, 'gtk', "PlatGtk.cxx") ]

lib_sources = base_sources

include_dirs = ['include', 'lexers', 'src']

if is_windows_build == 'windows':
  include_dirs += ['win32']
  lib_sources += ( os.path.join(scintilla_dir, 'win32', src) for src in ["ScintillaWin.cxx", "Scintilla.def"] )
elif is_unix_build:
  include_dirs += ['gtk']

cpp_options.cpppath += [ os.path.join( scintilla_dir, inc ) for inc in include_dirs ]

lib_objs = cpp.CompileShared( lib_sources )


if is_windows_build:
  rc_obj = cpp.CompileResource( os.path.join(scintilla_dir, 'win32', "ScintRes.rc") )
  
  lib_objs = [ lib_objs, rc_obj ]

scintilla_dll = cpp.LinkSharedLibrary( lib_objs, target = 'Scintilla' )
Alias( 'lib', scintilla_dll )
Default( scintilla_dll )
