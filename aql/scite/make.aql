import os

import aql

# @aql.eventHandler
# def   eventNodeBuilding( node, brief ):
#   aql.logInfo("Building node: %s" % (node.getBuildStr( brief )) )

SetBuildDir('output')

cpp = Tool('c++', tools_path = '../tools')

cpp_options = cpp.options

ReadOptions( 'make.cfg', cpp_options )

is_windows_build = bool( cpp_options.target_os == 'windows')
is_unix_build = not is_windows_build

scintilla_dir = cpp_options.root_src_dir.get() +'/scintilla'

src_dir     = scintilla_dir + '/src'
lexers_dir  = scintilla_dir + '/lexers'
lexlib_dir  = scintilla_dir + '/lexlib'
include_dir = scintilla_dir + '/include'
win32_dir   = scintilla_dir + '/win32'
gtk_dir     = scintilla_dir + '/gtk'

#//-------------------------------------------------------//

if is_windows_build:
  use_direct2d = cpp.CheckHeaders( "d2d1.h", "dwrite.h" )
else:
  use_direct2d = False

#//-------------------------------------------------------//

base_sources  = FindFiles( src_dir, '*.cxx',
                           exclude_mask = ["Catalogue.cxx", "ExternalLexer.cxx", "ScintillaBase.cxx"] )
if is_windows_build:
  base_sources += [ os.path.join(win32_dir, "PlatWin.cxx") ]
  base_sources += [ os.path.join(win32_dir, "ScintRes.rc") ]
  def_file = FileValue( os.path.join( win32_dir, "Scintilla.def" ) )
  
elif is_unix_build:
  base_sources += [ os.path.join(gtk_dir, "PlatGtk.cxx") ]
  def_file = None

#//-------------------------------------------------------//

lexers_sources  = FindFiles( lexers_dir, '*.cxx' )

lexers_lib = cpp.LinkStaticLibrary( lexers_sources, target = 'Lexers' )

Alias( 'lexers', lexers_lib )
Default( lexers_lib )

#//-------------------------------------------------------//

scintilla_sources = list( base_sources )
scintilla_sources += ( os.path.join( lexlib_dir, src ) for src in [ 'CharacterCategory.cxx', 'CharacterSet.cxx', 'PropSetSimple.cxx'] )

include_dirs = [ src_dir, include_dir, lexlib_dir ]

if is_windows_build:
  include_dirs  += [win32_dir]
  scintilla_sources   += [ os.path.join(win32_dir, "ScintillaWin.cxx" )]
  scintilla_sources   += [ os.path.join( src_dir, "ScintillaBase.cxx") ]
  
elif is_unix_build:
  include_dirs += [gtk_dir]
  def_file = None

cpp_options.cpppath += include_dirs

scintilla_dll = cpp.LinkSharedLibrary( scintilla_sources,
                                       target = 'Scintilla',
                                       def_file = def_file,
                                       use_direct2d = use_direct2d )
Alias( 'scintilla', scintilla_dll )
Default( scintilla_dll )

#//-------------------------------------------------------//

lex_dll_sources = FindFiles( lexlib_dir, '*.cxx', exclude_mask = "LexerNoExceptions.cxx" )

lex_dll_sources += base_sources
lex_dll_sources += ( os.path.join( src_dir, src ) for src in ["Catalogue.cxx", "ExternalLexer.cxx"] )

lex_dll_special_sources = [ src_dir + "/ScintillaBase.cxx" ]
if is_windows_build:
  lex_dll_special_sources += [ win32_dir + "/ScintillaWin.cxx" ]

lex_dll_special_objs = cpp.Compile( lex_dll_special_sources, cppdefines = 'SCI_LEXER', prefix = "lex_", use_direct2d = use_direct2d )

scilexer_dll = cpp.LinkSharedLibrary( lex_dll_sources, lex_dll_special_objs, lexers_lib,
                                      target = 'SciLexer',
                                      def_file = def_file,
                                      use_direct2d = use_direct2d )

Alias( ['scilexer', 'SciLexer'], scilexer_dll )
Default( scilexer_dll )
